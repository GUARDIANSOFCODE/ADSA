#include <iostream>
using namespace std;

// Node structure
struct Node {
    int key;
    Node* left;
    Node* right;

    Node(int val) : key(val), left(nullptr), right(nullptr) {}
};

// Right Rotate
Node* rightRotate(Node* x) {
    Node* y = x->left;
    x->left = y->right;
    y->right = x;
    return y;
}

// Left Rotate
Node* leftRotate(Node* x) {
    Node* y = x->right;
    x->right = y->left;
    y->left = x;
    return y;
}

// Splay operation
Node* splay(Node* root, int key) {
    if (!root || root->key == key) {
        return root;
    }

    // Key lies in left subtree
    if (key < root->key) {
        if (!root->left) {
            return root;
        }

        // Zig-Zig (Left Left)
        if (key < root->left->key) {
            root->left->left = splay(root->left->left, key);
            root = rightRotate(root);
        }
        // Zig-Zag (Left Right)
        else if (key > root->left->key) {
            root->left->right = splay(root->left->right, key);
            if (root->left->right) {
                root->left = leftRotate(root->left);
            }
        }
        return root->left ? rightRotate(root) : root;
    } else { // Key lies in right subtree
        if (!root->right) {
            return root;
        }

        // Zag-Zig (Right Left)
        if (key < root->right->key) {
            root->right->left = splay(root->right->left, key);
            if (root->right->left) {
                root->right = rightRotate(root->right);
            }
        }
        // Zag-Zag (Right Right)
        else if (key > root->right->key) {
            root->right->right = splay(root->right->right, key);
            root = leftRotate(root);
        }
        return root->right ? leftRotate(root) : root;
    }
}

// Insert operation
Node* insert(Node* root, int key) {
    if (!root) {
        return new Node(key);
    }

    root = splay(root, key);

    if (root->key == key) {
        return root; // Key already exists
    }

    Node* newNode = new Node(key);

    if (key < root->key) {
        newNode->right = root;
        newNode->left = root->left;
        root->left = nullptr;
    } else {
        newNode->left = root;
        newNode->right = root->right;
        root->right = nullptr;
    }

    return newNode;
}

// Delete operation
Node* deleteNode(Node* root, int key) {
    if (!root) {
        return nullptr;
    }

    root = splay(root, key);

    if (root->key != key) {
        return root; // Key not found
    }

    Node* temp;
    if (!root->left) {
        temp = root->right;
    } else {
        temp = splay(root->left, key);
        temp->right = root->right;
    }

    delete root;
    return temp;
}

// In-order traversal
void inorder(Node* root) {
    if (root) {
        inorder(root->left);
        cout << root->key << " ";
        inorder(root->right);
    }
}

// Main function
int main() {
    Node* root = nullptr;

    root = insert(root, 100);
    root = insert(root, 50);
    root = insert(root, 200);
    root = insert(root, 40);
    root = insert(root, 30);
    root = insert(root, 20);

    cout << "In-order traversal of the Splay Tree: ";
    inorder(root);
    cout << endl;

    root = splay(root, 30);
    cout << "Root after splaying key 30: " << root->key << endl;

    root = deleteNode(root, 40);
    cout << "In-order traversal after deleting key 40: ";
    inorder(root);
    cout << endl;

    return 0;
}
